---
title: "[CPlusPlus_Study]C++로의 전환"
layout: post
date: 2018-05-10 00:44
image: /assets/images/markdown.jpg
headerImage: false
tag:
- CPlusPlus Programming
- Coding
- CPlusPlus
  star: false
  category: blog
  author: john Ko
  description: Coding
---

## Title : Part01-02 C++로의 전환

### Chapter 02 C언어 기반의 C++ 2 

**클레스의 기본**

* 프로그램 분석이 데이터의 그룹화가 생기고  기능의 그룹화가 되며 기능은 데이터의 종속적이다.

* 구조체는  데이터의 그룹화를 위해서 정의한다

* 하나의 함수는 하나의 기능을 가지면 된다.

* 구조체(데이터) + 함수(기능) =클래스

* C++ 에서는 구조체 안에 함수를 삽입하는 것이 가능하다. 

  ```c++
  struct Car
  {
      enum
      {
       ID_LEN=20,
       MAX_SPD=200,
       FUEL_STEP=2
      };
      char GamerID[10];
      int fuelGauge;
      int curSpeed;
      
      void ShowCarState()
      {
          //구조체 안에 있는 함수는 Inline이 포함되어있습니다.
      }
      void Accel();
      void Break();
  };
  
  inline void Car::Accel()
  {
      //구조체 밖에 있는 함수는 inline을 추가해야합니다.
  }
  
  inline void Car::Accel()
  {
      
  }
  int main()
  {
      Car ung99={"run99",100,0};
      
      return 0;
  }
  ```

  

  **클래스와 구조체의 유일한 차이점**

  * 클래스와 구조체의 차이점은 class는 기본 멤버는 private이고 struct는 public으로 되어있습니다.
  * 클래스를 대상으로 생성된 변수를 가리켜 '객체'라고 합니다.
  * 클래스 내에 선언된 변수를 가리켜 '멤버 변수'라 한다.
  * 클래스내에 정의된 함수를 가리켜 '멤버함수'라고 한다.
  * 클래스의 선언은 헤더파일에 넣고 함수의 정의는 소스파일에 정의한다.
  * 인라인 함수는 컴파일 과정에서 함수의 호출문을 대체해야 하기 때문에 헤더파일에 함께 정의 되어야 한다.
  * 구조체에서 선언 순서에 따른 
  * C의 구조체 상속 방법

**Chapter 03-3객체지향 프로그래밍의 이해**

- 클래스는 현실세계의 객체를 추상화 시킨것이다.

- 클래스는 설계한다. 객체를 디자인한다.

- 현실세계의 객체를 지향하는 개발 방법론이 객체지향 프로그래밍이라 한다.

  | 사전적의미     | 객체지향 프로그래밍    |
  | -------------- | ---------------------- |
  | 물건 또는 대상 | 객체 중심의 프로그래밍 |

  - 나는 과일 장수에게 두개의 사과를 구매했다.
  - 객체지향프로그래밍 에서는 나 과일장수 사과 라는 객체를 등장 시켜서 두개의 사과구매라는 행위를 실체화한다.

  - 객체지향 프로그래밍은 현실에 존재하는 사물과 대상, 그리고 그에따른 행동을 있는 그대로 실체화 시크는 형태의 프로그래밍이다.

  - 클래스 설계는 쉬운일이 아니다. 항상 고민해야한다.

  - 함수의 호출을 가리켜 메시지 패싱(메시지 전달)이라고 한다. 

    두 객체간의 주고받는 연관관계의 함수(메시지패싱)

    

  